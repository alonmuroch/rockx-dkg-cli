package node

import (
	"crypto/rsa"
	"encoding/base64"
	"github.com/bloxapp/ssv-spec/dkg"
	"github.com/bloxapp/ssv-spec/types"
)

var OperatorOwners = func() []*OperatorOwner {
	sk538Str := "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcDUrb1hEK3NMbjZqRWlNbVZEYkZaOXFmZkZvZFhqMFBtMytzajZOTHhuc1l3UTVxCnRUNmFZQk5iR0xvR2hJeGZxNDIyaGNPcHhrdHZYYy9haGV4UStmSzJ0d2xCUCt3M2NyWWVwQnlidGJLQmplbkIKN1Z2SWZ1NnBCQlhVT2dRdUlwZnV2QmRla0xGbHk0UVVwQUM5MkZkL2JHekFvbWxzd2RJOWVMSWRrOTYxcmpiSApFZ2dKcnByZ3NmT3RwNFJaYy9nUWM2bU9lNXppN0kvWFZrL1hCRDVmVmdqR0ZjMXFNcGYwOXV5THNXUm9ibHBOCjJvb09qSVZwUi8wbHpMUk9yVWNoSFpTZ0ZVVy9WTThLRHdha0c1QW5lNm5PdXYzV1MySUs5aTZTQ3k2ZnRkZWoKS0dhT2F3QlRLc1lUY3ZmM21sY1crb05wZVhRWHl1eGY3bSt1RXdJREFRQUJBb0lCQVFDRG15LzFsYXhiS09SaAp0aVUrMDIzMFYwc0d1RDM4b3BaaGNVR0wyUnNDYjkyRW5nd2IxMVlmZnJMMFhBSUlDYXFIcUJFWlB3RktCaW9mCkRyVzBsbEVSbllYbGVhZTRSMzlWV2pYK2hkT2ZPZExNR0M5QmErR2ovei9HVEZrL1g4N1ZMRkt0Yk8rN1RQenUKWi9wSXRhaFlkb0krSDdpekMzRHZVR0VoSlQ5aHU2RzdEbFJ5Ni9pVTJpUm42NmM3UmVJbmpadkRlTHMzeTFpOAo2MUxNZUpQaWNtMzVEQlRqSE9kZ0tqTGtBN0dTU2k0MGV0Qm1jclVoYXEzTHl0SzMxdDg3RklWYnk3VEJ3KzRFCnMrYmFWY0dVUnFVT1NaNmU3Y0YvY2tLWjd0N3R2dzhZYldoNU9laERUd1hzaWVGNE40M3k5MXQzNW5zdEVsakEKdHlJd1dJUHhBb0dCQU5Ia0MzKzQyRUQ1NFJFdkwrQ1pybEJUU1FSVFVxdndWazF3ZmliakVqbVBaK0tuMzh6NwpxZTBKa3MraTUyY1Jqc0xvYTlIYTZlQlprU0RmQTJsRGpGcWNGN3AzZGpZbTBYdExveXBiZmNzRmVqWUJXdU1vCjVJdW1sbWhiM0h1RkZFM2t5RUxqVVdnTDZrTC9uSU5ZQWhhTm13WUxXSEhXNit4NmRwS1ludGpiQW9HQkFNeHkKa2U0UDB5N0V2aEFvbENjTkdxbG0rWkhUTmdlMkdEb2w4VmQraGNud2tlMG9ZWTAxWDhCWEhoMjliQlpoWUhwSAp2Y0N2WlE2WnpZMy9BcHdXekRSNkFSMURSOTZicGV5dGdOcFNhUVdkUlhSNXhjZFg2Qi9UY3dWeHoxL3Jrby9BCk1RbjA0VklSVmtScEhXSXUvRkR6Sjg2d0dpa2dLZUV5dUFjWm9ja3BBb0dCQUtVeDVDOEJVQXRMNEcyREF4NjIKTmpENGJBYWdnZmZic0VGQTRiay9qTytLeEF2cmJzVEo2b01xdnNiM2cwTm0yVUxrWlVBRkdZQS9YbTlOdDBTWgpLcFdDTjFiR2dWNjdqTEtLNUlBSkJHZlBCdElNblBrZkRVb3dzajZ1MWtqTmhCNk9pMlBCd0NleEFRNzhXYll5CmhXbzB4NmVwTkZKZEF0RGJ6Z2t4WUF4ekFvR0FOL3lyLzlCdm1hQWhHRlcwZEprL0V1THpOejdxemVQTThLZVIKVnM5OEhkZjJia2FmcUViVWlOeVNqN3hlekNZd2dHd0RCN0JBY1dZbkIxcXRRVWR3OW5IdXVpL0JqN0Y2RjcxUAp5dm5FYnRncHZBTFk2WVVtT1FqenQ2cjZDaDk5ekVYcVovcWFkWm52ME40a1FNM3pKTXZodTlVMzVNazlEc0dQCjZjbllKemtDZ1lFQWpGMXAyMVh4OFI1ZUR1K1hEaGZNcmVaSmUyRFc0Y040TmVWL1FwNWZzUGVkMFp3TTV5MTMKWUo3VmlIZURLQ3JlQk9FZTk1MmQxVUc5ck12QjNGaXpNZkI0MkdRRzNUZVdWNjlGVExpTlc1QXFSWk9hUkFFZQpheEV2cmVJSnlUUlRSSUdkSnFTMC9DUUZNNkt2dlBmdTlBUEZoOWJLeXp0S05ZWlZpL1l6eDJNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
	sk539Str := "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdExESWpsaE92UmpLdytKS2p1RHdHTndiQ1R2Y1ZXTTBtSS9oaVErVlZWbE9JL1liCkdvU1dsWllRaWdTOFRGb0ZKOWhkT0kxWlA0K2xaQnJjbXo5RVhNUEZkQVFTMWF1bms4WXdZc1k4U2hNWUJBKzIKVUxDSGFXZDU2R3kzUHRtd25ZZzV0Wjh2b3BXQmxDR3ZveG1OUno1NGsvclUyRWhITWcvL21NeUUxQTkrZUdDWAphakNUKzdEZHR5bWtzWTNlQmxabE1XZVFVQ1FDTEt2bEw5cEFzcE1yVUQwbEtsaXJQWnl0Nm1pQ1NlZURrUmwrCnlVL3R3SnJ0emMxa29wL2F1bmFZT0RPaS9jTVBtdFRyL01VUDhjeEkzTHg3NnJPTlBxaExUT2Z6REphNnpBdWcKZi9ndk1QSXFvZVRtVVJHN2NWT2svVWdVZTJXYkI2NUdnNXVBa1FJREFRQUJBb0lCQURzSzlVNEdMeHg5U0d4Lwp1a3M3MTFqWU80Rmw3Ulo5eDBiKzVQeXJlZW1jdC9ycVJXc0IzazdjN1dTY0xZZHBkdnZSS0l6OUt5ZW80YXQzClY1VG5OSWgzZEVMM3ZjdlNQbno4S3YxcnQzR2hFWnpxSVhIMmJSa1ZOZkdyN0tqOTYwZGVwelRnNG1qbkg2TnUKNm55S01lOFF5OGZYRTh2a3VsYnlnVnZGb0xYR0diYks1ZlgycVlyWklJZy9zUE5kRE15WEgvcWZBdHI2ZUlISgpMS0RRZVg3eVpLVlBHZlBSeS8vSjQ0bVFzdTBieENUMW5sTndzblpHV2dOKzhUNVZsZ3RmeTZZVVZvTVZBK3RZCm5FNWFGU1AzTFJJaHVlVnV1U0xybXZqTytrVE02QmVwYlFidlE3VVF1SkR3emlXZFNXRiswRExoNDNiTmV6dTEKZ2xoNWZIMENnWUVBM2IyR05TenRPVi9iMERwbEJyc0N4TkRzcW5PK1BJVDB3RTlSM0hmUXVGNktvYm5jOVp0VAorQkpqYTVFTTF6ekg2c3Nob1dPbGp4TklDNjRTZVU5bmhrWWhlTEN6VHprWGFUaVI3c2liRHVSUSszcjMzSmVyCkJVck9QZ3pBSTJFMFpYRmFTTEVKNVlyTkk3WWF6T3hmVE9yVTlWYXJMNVEvczRHN1d3aUNkczhDZ1lFQTBKdWYKQzcxM0FJMGsrV05IWiszamMwYXpJalUwTkxtSlIySnJDank2WVR1Y3R4Q2NYMHI2VTJWOWJpZnBtMTZlZi92Rwo3c2NqM0thdy90MGZKWTBGVkI3RUdCVlRsbDlLMGhKL0paOGFIM3pSMDV6RHY5YUZ4TkRhVS9lSXZEajYzdXEyCkVaS25jRy9DZXc5K0NJaHBQR3B5cWZDNlpLQXRLUUdiUzJ6K2FwOENnWUJ4UXJSQmh4QW94VGplOUdUVCtrUGcKeWlLSXNoUVNqNHNBaThOeGpGVzFScjBpL0cvTG1DcGN4Tys1YXQ2WE5qbWJTV1NGTGdQTHYvcUYxTVVrNTVVbQpkYjMxQ3JTY0c3cEVpWnVvenhpOGs0eDExNHF4UjFzWW1ld2NyNkNZc2JiMHRlQjZ6c3NTVDBLWEloWXdZL0FOCnRzbE9BNVh1K0pkTkZrL2ZvTW9hNndLQmdCVlBnSXpyZXdlMFk0MlNoYzNwTUc0clQ4dHowZlI4NjdnK0pwOHkKR3Z3cDRkV1Z2ZFBDVGhaTTdPWmU3Mjl1MkJSTS9VS1JWMm1JSWRhM2NpSWM2T2x5QnloS3JYSlVJOG1ZR0NNWQp3TXRzcmViSFFmd01CemhXK2FiUVI4aXFyWDR1VGhFM2dTRnNXVnJHOTJJWnhWNWxwWGNVMzRXK0V6NzRLZ3duCmcwb1RBb0dCQUxrdGgwU0tENFVLeE1zUkNKYUxNaHlFenVGSW5wV3hkVEk2LzNleGhOQ2cvaTkxY3NmVWpBLysKNlAvNkxVeENiZzhCeGwyM21MSVJGR0NNOXNac3hRNVpQSDIrSXhaMHFad0MzZVM2R0RuVUxZYmN2Nm5sa1JFTgpxQmd0SnBJeG1DY2E4Rm40TmtCbWx5bVI3RTBmN1kzNGlQY1BLVER4NVdjSisvU3A4MDVsCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
	sk540Str := "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNW5MLzF3TG1Xc1h3R09HL2VCR3QvREJJYzhqcU9LRFE2bFJ4c2lWTi9ySEZXRXJuCnpkTDU3ZjRoN0Nyd2owV2FSVkluKzhJZ0U5SS80QnFLNUFSdFhia1lHT3U1NDRiM3p3NmU1dElBRWJ2V1pXT3kKaFFZZjFrelNHYi9iTG5SVUhwSVdycExiVFVDOXRCTHQ1OStiZjBqZy9KUXlWVlM5NXNqakp6dlE1cjBoNENJRQppQUowNnBxMEdvZ0RESXBhWE5KQ1VSTDB1L2FPSFBvUXp6SXVhWUdwVjFrc2FoTHZWMnlEUDFvaDQ2RE1rMEkrCkZQOVFnZGR2bUlDd0VqYUFPRU5aN0RSbzZvaVdmVFJzNm12ak9kUzh2dWpmeEl5YkdHZ3E1RkxHQTdRdDB0ZXYKWEtFSGZzKzRXaHJCSHpWK0hVYWNncCt2S2dleUNhejNkc1pOT3dJREFRQUJBb0lCQUJxdHA0YVp0RmMvNFByUQpiNTBUMXVPQ0ozRVlDbDJCNkkyb052MWJxanJaRTdLVUFWL25rNzJFbFNMRkdkSk1TWDdLOHd3SFBqVnRPcTNVCkJNNCs0UFpmcmpWOFhLbkZmenkrUVpFUk1LYmM2d1lUMDUvb3hKakhqZThqTWRtZjUva2VDbmd0VWl3UVdhWFcKSnlxWHpXV2Y1MFAyV0JsZTFSazVtbXA1VjBiTzJEWHJOT0I1V1IyOE1DTEorN004VGZPblJVZkpJN280SGNLYwo3S3RpMFkvSWxoa04rY0pIQnRTV2lMK1JaMWpKQWtUV01ZV3pnV1gyV0FScmc2WndtQ25Wc2tPWXVTWE9OSkRUCkdsMmVEYjVxSTFTUWJoWUtGSmpSRzNrWks2dEVFaEhaeTluZWRrZ2V3RTArMkJXOURVYWdPWllqK0NxSmtuaysKSW95d3Boa0NnWUVBNzVtTkVhVjBodzFIZ3VZMW1iYW03WnNGdjJsbDBoVlBHMzdpVWtYTnQySG9YcUdnbThLSQphWldYcTVtMGtrWU9DNGgzalNjWGxMa2ZoYnNxRE5rdHZPYVYyNExjRWJsd0pGTVJJZDFVSVEyeElOaWlBeW5rCkgwRVlzVGdWdE9yUlZNbTRXVHBaaEZzL3VuNzU2ektaRkJSTnp4MTJVZVhNMXVLUVRPM2tFUzBDZ1lFQTlqa2EKejFUdWxISVZObTltWjJlaThBeGNiRU1pOGVHOTBiN0QvTDhQTTJ5ZC9HZ3Q5YUt3Z3lObW1KMGEyYzdCeWRxZwpYZHc1TjRpZUVXSm1EaWNLb2RVa0YrVEdBcThrdHlwejVXNE5qbVdCSGREa2UybGJCa21qV1JJMytzZHhJRTBkCjdlcVlOOFlIV3poUmpENzRiWTRad3RKVTZqQi83T2hEazkyMFNRY0NnWUVBdzZiVHR6RXdzb2Q1ZWI2YXptYUUKY1VwQnEwaFp5TzkxcGJJN0JZdlNySWphdzB1Z1p4QzNhK0NuOVl5U0UwLzVjQm1ENWxPaHdlUlpoVTZNeStrYwpuRUIrNXIwNUQ1QXByci9XSVowbWNjZEllTlh0bGovQzlIS253eTlWS21NRmhRTWo4bGpmZUdFNjdRTjYrVUJjCkdEVnNSRkIrcWVuSkZ6L3pMWjZrdWhFQ2dZRUEyNjRIWllSNWVLaHdsS2kvelBLQ1JYcEIyN1hxcjdTaEQwb00Kd3F3VWUrVWs3OVpqYXcxRVB6eU9oUXRtc1gzdkdKR2ZFeDh4VFlMdXhNUHVHaUpyTWdoZ3M1REJ1aE5aeHJKeAp4UGx6enVCeFdwRE55ZTR0OEdZeS8zMXB4SzI5R1B5MC8xaVhodXVBRkxzaXh1Wkg4RGNnZE5vRU9RNGNsTnFGCnNKL1dBbkVDZ1lFQXFiSnRiVUllUVJiWURSOHlCNENZMUphMXFWbkVsbmdmS1hRL1pmdWpvSmJlYzVFaS9oa1YKblgramdqVXpoSFRCR1FPQ09OOXNvdnAyOHZwUnl0ZUJaL0ROd1VTclpMdlNCU0puNzBlcVVMeE9oa1IzR3RRTgozZUowQkhwWmtEbm1DaWdCaDZqendmL25tVjFuSm4vTjE0QkgxRDZFVVkxOHZBWm1hRWZxSXRRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
	sk541Str := "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3d0VE52OUVmQlM5bnpZUlR6d2l3WUd3SnRkbnZTaXVJQXZZRGlxUHFDVjF3N20wCis3OVpCem5GMGlvMjJ1blVTZFNhbzVRYVpTVElFdXU5SGRxSHVKRU0yaXBzUVJrcXRqRUpaNWNuODFnSW5JVSsKdHE0WFo0WmxKN3M2Q1VobTAreThwNGlHeFl0RlozVEM5MUlPa3J3NW1KZUZSTmNWUHk0Nnk1RkdHNW01blI1ZQowUldFUk5XeVE0TWdRUXlDanVITDFoUUsrT0tXRERYS3drdStqd0RheUFSUEd1SUU0OUUwajBQZnJyNTlBci9zCnpURUFrSHI0RmMwMXA1dGx0ak45cmg0aGQrbHVTWkJXNi8xa1M4TTF3RU1kb3hrd0tVSk5NQ3lPakN1Q0xpNDcKYnU2VXJ1K0t5V2oxVDZYSmdUbXdQZlVxK3g0TXZEMnF2b05jM3dJREFRQUJBb0lCQUVMZ0pRbnkyUUs3d0lRYQpidWE0b0liRXlTWUk2VCszVlNxMUlkTlF4RzNhNkJ6ZVhhSjJ1MnMrZ2d4Wkpqb29ndG04NXJIWTNPOFFpUWJBCk5OaFV5c0wrc3QwK1lVY0RmbmVrNDAxbElVLzhmdUx2eGhmMytOZjdWQWMrSUpSZERjTjB0cGFoSVMzaU1sOU4KTnBHb2ZiY0RSVVFndkcrVkl1T0JnZ2FOVWJGMjNwUno5TkdxR0RTbDArcTc5bVFXLzQ4UTlLRTZXdWdWOEF0WQptc0grQ2gwUFNGYytrQTYyRE9NbGVnUUxhYUpWOTFFeWtiekxPRlFBczU2RnpiSUF2MzhmUUFyOWFVa1JrVWZvCmlVaytvSXkwVVlZWkplSVBwcXZHSzgrMUVzc3lWTzg1ak44cUc3ZG83VEFoTElKYU5HdnBJMzUwSkFKQU95ZGgKdXVocGlXRUNnWUVBeDl6TU0yL1lZd1FWYXE5ZWhlRkpBOEkxalZjam91R2RYS3BQWU9yQkp1QlJGTXB6ZGVZWQpSZTRmbkJLelB5Y2VOdmMveDhVVWFoT2ZTbzRIMU1EZTNrRFg2bGRhSGlTb052ZjlTRGVlUXE5M1ZFTkNoanRXCnZiQlBSTDdnVGtMZXF6ZTdiSEJ4SkJPOFRicEZsL2F1MkwzUWxpL21BdGtLUGNxTUNtLzBOREVDZ1lFQTVWV1UKNDJiYkNTWnE2bnlWSG1VRkdnYXRlemtrbHlCSmFwcmc3QVFsaVVxTU02V2dQL2FOUFkvQm9FQmFwWUtwcUhQVQpoODJjUWRRT1h4ZnJPK2N6MFZNQmlwZjBxOEYrVkNMQmtvVFBUaXNaMjZ0WVNyeG1pNmxFUmsxMXJpVHFhSDFYCkpYUHhnTnpwUUxWWHF5alp3VFc0Y1NSNWNrdjRLZTZwaWdlcnJnOENnWUVBd0dRVWtlTTFpc05RbG4wd1lYSW4KWmgzYWpTOTMxNENWaWJGTWJrQXRKTzVFUHQ1UDNRdGRERndZUTVaZ3hBYzA5N1oweUNvMzU1RHlBc1BNV0FvOQp2L2J0b2VEcW1CK3phZzY0MjM3bXNzelQ4dUk0TkowRWQ5OHp2enA3RS9zYysvYlBUYWpEMFBYS2k0d25HQXpYCjdUNXpmMCttZTlGUUlZRkw0M1Ezd05FQ2dZQnV4VXFZR0NzK0hTOVJPWUd4WDZ2NktUV01La3F4TUdnbHRNOWwKVUk5czQvUWFVaXE0R25lWVA2S1BxK1hjd2VMK3VZdnpXRzNjSWZnYkdHdUgwS0hudm9jbEVVYWQyMlVRY0lVOQpKeWNXbzV6bXpMbGx4K0JrSHdzYVJmbk1kb28rbENRT3RCVDNZRHpPQTRsbjQrQmlBWGVvTnF6dWR5RlQ1N0krCk9IeEZJd0tCZ0RERS84NTRHK2VZYkhnUStyZWFldzErVU94VGJsTWpLY0N1NUNvQm5PNTdHRlByU0JaOFhkM3oKaWhhSFNaV3NpdW8rSnFENUZZSzRrU0lWMzNzYnF6WDFpOEl5enhJeXdXYU1mS3NsRkcxVEVKd0Z3MkJjdnhJNgptTGc4cHBoSjJWMFg0ZjRUblZpbUZNa0FDWDYyNDZuVmJwNW0rWW43Y3Iydzl5NERxd3VYCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="

	ret := make([]*OperatorOwner, 0)
	for id, pem := range map[uint32]string{538: sk538Str, 539: sk539Str, 540: sk540Str, 541: sk541Str} {
		byts, err := base64.StdEncoding.DecodeString(pem)
		if err != nil {
			panic(err.Error())
		}
		sk, err := types.PemToPrivateKey(byts)
		if err != nil {
			panic(err.Error())
		}

		pk := sk.Public().(*rsa.PublicKey)
		ret = append(ret, &OperatorOwner{
			Operator: &dkg.Operator{
				OperatorID:       types.OperatorID(id),
				EncryptionPubKey: pk,
			},
			EncryptionSK: sk,
		})
	}

	return ret
}()

type testStorage struct {
}

// GetDKGOperator returns true and operator object if found by operator ID
func (s *testStorage) GetDKGOperator(operatorID types.OperatorID) (bool, *dkg.Operator, error) {
	ow := OperatorOwners
	for _, o := range ow {
		if o.Operator.OperatorID == operatorID {
			return true, o.Operator, nil
		}
	}
	return false, nil, nil
}

func (s *testStorage) SaveKeyGenOutput(output *dkg.KeyGenOutput) error {
	panic("implement")
}

func (s *testStorage) GetKeyGenOutput(pk types.ValidatorPK) (*dkg.KeyGenOutput, error) {
	panic("implement")
}

type testNetwork struct {
	Nodes map[uint64]func(msg *SignedTransport) error
}

func NewTestNetwork() *testNetwork {
	return &testNetwork{Nodes: map[uint64]func(msg *SignedTransport) error{}}
}

func (n *testNetwork) registerNode(id uint64, f func(msg *SignedTransport) error) {
	n.Nodes[id] = f
}

// StreamDKGBlame will stream to any subscriber the blame result of the DKG
func (n *testNetwork) StreamDKGBlame(blame *dkg.BlameOutput) error {
	panic("implement")
}

// StreamDKGOutput will stream to any subscriber the result of the DKG
func (n *testNetwork) StreamDKGOutput(output map[types.OperatorID]*dkg.SignedOutput) error {
	panic("implement")
}

// BroadcastDKGMessage will broadcast a msg to the dkg network
func (n *testNetwork) BroadcastDKGMessage(msg *SignedTransport) error {
	for _, c := range n.Nodes {
		go func(msg *SignedTransport, f func(msg *SignedTransport) error) {
			if err := f(msg); err != nil {
				panic(err.Error())
			}
		}(msg, c)
	}
	return nil
}
